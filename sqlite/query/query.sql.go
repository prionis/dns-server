// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
)

const createResourceRecord = `-- name: CreateResourceRecord :one
;

INSERT INTO resrecords (domain, data, typeID, classID, ttl)
VALUES (
    ?,
    ?,
    (SELECT ID FROM types WHERE type = ?),
    (SELECT ID FROM classes WHERE class = ?),
    ?
)
RETURNING id, domain, data, typeid, classid, ttl
`

type CreateResourceRecordParams struct {
	Domain string
	Data   string
	Type   string
	Class  string
	Ttl    sql.NullInt64
}

func (q *Queries) CreateResourceRecord(ctx context.Context, arg CreateResourceRecordParams) (Resrecord, error) {
	row := q.db.QueryRowContext(ctx, createResourceRecord,
		arg.Domain,
		arg.Data,
		arg.Type,
		arg.Class,
		arg.Ttl,
	)
	var i Resrecord
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Data,
		&i.Typeid,
		&i.Classid,
		&i.Ttl,
	)
	return i, err
}

const deleteResourceRecord = `-- name: DeleteResourceRecord :one
DELETE FROM resrecords
WHERE id = ?
RETURNING id, domain, data, typeid, classid, ttl
`

func (q *Queries) DeleteResourceRecord(ctx context.Context, id int64) (Resrecord, error) {
	row := q.db.QueryRowContext(ctx, deleteResourceRecord, id)
	var i Resrecord
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Data,
		&i.Typeid,
		&i.Classid,
		&i.Ttl,
	)
	return i, err
}

const getClassName = `-- name: GetClassName :one
SELECT class FROM classes WHERE ID = ?
`

func (q *Queries) GetClassName(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getClassName, id)
	var class string
	err := row.Scan(&class)
	return class, err
}

const getResourceRecord = `-- name: GetResourceRecord :many
SELECT id, domain, data, typeid, classid, ttl FROM resrecords
WHERE domain = ?
`

func (q *Queries) GetResourceRecord(ctx context.Context, domain string) ([]Resrecord, error) {
	rows, err := q.db.QueryContext(ctx, getResourceRecord, domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resrecord
	for rows.Next() {
		var i Resrecord
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Data,
			&i.Typeid,
			&i.Classid,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceRecordRecursive = `-- name: GetResourceRecordRecursive :many
SELECT id, domain, data, typeid, classid, ttl FROM resrecords
`

func (q *Queries) GetResourceRecordRecursive(ctx context.Context) ([]Resrecord, error) {
	rows, err := q.db.QueryContext(ctx, getResourceRecordRecursive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resrecord
	for rows.Next() {
		var i Resrecord
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Data,
			&i.Typeid,
			&i.Classid,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTypeName = `-- name: GetTypeName :one
SELECT type FROM types WHERE ID = ?
`

func (q *Queries) GetTypeName(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getTypeName, id)
	var type_ string
	err := row.Scan(&type_)
	return type_, err
}
